{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"ui-player\",\n  methods: {\n    playToggle: function playToggle() {\n      if (!this.start) this.start = true;\n      this.isPlayed = !this.isPlayed;\n      if (!this.isPlayed) this.$refs.video.pause();else this.$refs.video.play();\n    },\n    changeVolume: function changeVolume() {\n      this.isMuted = false;\n      this.$refs.video.volume = this.volume / 100;\n    },\n    mutedVolume: function mutedVolume() {\n      this.isMuted = !this.isMuted;\n      this.$refs.video.muted = !this.$refs.video.muted;\n    },\n    seekVideo: function seekVideo() {\n      this.$refs.video.currentTime += this.vCurrentTime - this.$refs.video.currentTime;\n    },\n    requestFullscreen: function requestFullscreen() {\n      this.$refs.video.requestFullscreen();\n    },\n    forward: function forward(time) {\n      if (this.$refs.video.currentTime > 10) {\n        this.$refs.video.currentTime += time;\n      } else this.$refs.video.currentTime = 0;\n    },\n    rewind: function rewind(time) {\n      if (this.$refs.video.currentTime < this.$refs.video.duration - 10) {\n        this.$refs.video.currentTime -= time;\n      } else this.$refs.video.currentTime = 0;\n    },\n    updateTime: function updateTime() {\n      var min, sec;\n      min = Math.floor(this.$refs.video.currentTime / 60);\n      sec = Math.floor(this.$refs.video.currentTime - 60 * min);\n      if (min < 10) min = \"0\" + min;\n      if (sec < 10) sec = \"0\" + sec;\n      document.getElementById(\"currentTime\").innerHTML = min + \":\" + sec;\n      this.vCurrentTime = this.$refs.video.currentTime;\n    },\n    loadDetails: function loadDetails() {\n      var min, sec;\n      min = Math.floor(this.$refs.video.duration / 60);\n      sec = Math.floor(this.$refs.video.duration - 60 * min);\n      if (min < 10) min = \"0\" + min;\n      if (sec < 10) sec = \"0\" + sec;\n      document.getElementById(\"videoDuration\").innerHTML = min + \":\" + sec;\n      this.vDuration = this.$refs.video.duration;\n      console.log(this.$refs.video.autoplay);\n\n      if (this.$refs.video.autoplay == true) {\n        this.isMuted = true;\n        this.isPlayed = false;\n      }\n    },\n    goBack: function goBack() {\n      this.$router.back();\n    },\n    goHome: function goHome() {\n      this.$router.push(\"/\");\n    }\n  },\n  data: function data() {\n    return {\n      isPlayed: false,\n      vDuration: 0,\n      volume: 70,\n      isMuted: false,\n      videoObj: null,\n      vCurrentTime: 0,\n      size: 0,\n      start: false\n    };\n  },\n  mounted: function mounted() {\n    this.$refs.video.setAttribute(\"src\", this.playerDetails.src);\n    this.$refs.video.autoplay = this.playerDetails.autoplay;\n    this.$refs.video.controls = false;\n    if (window.outerWidth < this.playerDetails.size) this.size = window.outerWidth - 10;else this.size = this.playerDetails.size;\n  },\n  props: {\n    playerDetails: {\n      src: String,\n      size: Number,\n      autoplay: Boolean,\n      thumbnail: String,\n      title: String,\n      back: Object\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA;EACAA,iBADA;EAEAC;IACAC,UADA,wBACA;MACA;MACA;MACA,kDACA;IACA,CANA;IAOAC,YAPA,0BAOA;MACA;MACA;IACA,CAVA;IAWAC,WAXA,yBAWA;MACA;MACA;IACA,CAdA;IAeAC,SAfA,uBAeA;MACA,gCACA,gDADA;IAEA,CAlBA;IAmBAC,iBAnBA,+BAmBA;MACA;IACA,CArBA;IAsBAC,OAtBA,mBAsBAC,IAtBA,EAsBA;MACA;QACA;MACA,CAFA,MAEA;IACA,CA1BA;IA2BAC,MA3BA,kBA2BAD,IA3BA,EA2BA;MACA;QACA;MACA,CAFA,MAEA;IACA,CA/BA;IAgCAE,UAhCA,wBAgCA;MACA;MACAC;MACAC;MACA;MACA;MACAC;MACA;IACA,CAxCA;IAyCAC,WAzCA,yBAyCA;MACA;MACAH;MACAC;MACA;MACA;MACAC;MACA;MACAE;;MACA;QACA;QACA;MACA;IACA,CAtDA;IAuDAC,MAvDA,oBAuDA;MACA;IACA,CAzDA;IA0DAC,MA1DA,oBA0DA;MACA;IACA;EA5DA,CAFA;EAgEAC,IAhEA,kBAgEA;IACA;MACAC,eADA;MAEAC,YAFA;MAGAC,UAHA;MAIAC,cAJA;MAKAC,cALA;MAMAC,eANA;MAOAC,OAPA;MAQAC;IARA;EAUA,CA3EA;EA4EAC,OA5EA,qBA4EA;IACA;IACA;IACA;IACA,iDACA,mCADA,KAEA;EACA,CAnFA;EAoFAC;IACAC;MACAC,WADA;MAEAL,YAFA;MAGAM,iBAHA;MAIAC,iBAJA;MAKAC,aALA;MAMAC;IANA;EADA;AApFA","names":["name","methods","playToggle","changeVolume","mutedVolume","seekVideo","requestFullscreen","forward","time","rewind","updateTime","min","sec","document","loadDetails","console","goBack","goHome","data","isPlayed","vDuration","volume","isMuted","videoObj","vCurrentTime","size","start","mounted","props","playerDetails","src","autoplay","thumbnail","title","back"],"sourceRoot":"src/components/player","sources":["PlayerMax.vue"],"sourcesContent":["<template>\r\n  <div class=\"player\">\r\n    <div class=\"player__container\">\r\n      <video\r\n        ref=\"video\"\r\n        :poster=\"playerDetails.thumbnail\"\r\n        :height=\"size\"\r\n        @click=\"playToggle()\"\r\n        @timeupdate=\"updateTime\"\r\n        @loadedmetadata=\"loadDetails\"\r\n        id=\"vuePlayer\"\r\n      >\r\n        <source type=\"video/mp4; codecs=avc1.42E01E, mp4a.40.2\" />\r\n        <source type=\"video/mp4; codecs=Opus Vorbis VP8\" />\r\n        <source type=\"video/webm; \" />\r\n        <source type=\"video/ogg;\" />\r\n      </video>\r\n      <v-card\r\n        :width=\"size\"\r\n        color=\"rgb(0, 0, 0, 0.5)\"\r\n        outlined\r\n        class=\"player-controls d-flex\"\r\n      >\r\n        <div class=\"player-control align-self-center\">\r\n          <v-btn\r\n            @click=\"playToggle()\"\r\n            class=\"player-controls__actions\"\r\n            icon\r\n            color=\"primary\"\r\n            ><v-icon>{{ !isPlayed ? \"mdi-play\" : \"mdi-pause\" }}</v-icon></v-btn\r\n          >\r\n          <v-btn\r\n            @click=\"forward(10)\"\r\n            class=\"player-controls__actions\"\r\n            icon\r\n            color=\"primary\"\r\n            ><v-icon>mdi-fast-forward-10</v-icon></v-btn\r\n          >\r\n          <v-btn\r\n            @click=\"rewind(10)\"\r\n            class=\"player-control__actions\"\r\n            icon\r\n            color=\"primary\"\r\n            ><v-icon>mdi-rewind-10</v-icon></v-btn\r\n          >\r\n        </div>\r\n        <v-layout class=\"player-control\">\r\n          <v-slider\r\n            @change=\"seekVideo\"\r\n            v-model=\"vCurrentTime\"\r\n            id=\"playerSlider\"\r\n            hide-details\r\n            :max=\"vDuration\"\r\n            min=\"0\"\r\n            color=\"primary\"\r\n          ></v-slider>\r\n        </v-layout>\r\n        <div class=\"player-controls__timer align-self-center pa-2\">\r\n          <h6 :style=\"`color: #e31e2d`\">\r\n            <span id=\"currentTime\">0:00</span>\r\n            /\r\n            <span id=\"videoDuration\">0:00</span>\r\n          </h6>\r\n        </div>\r\n        <div class=\"player-control align-self-center\">\r\n          <v-btn\r\n            @click=\"requestFullscreen\"\r\n            class=\"player-controls__actions\"\r\n            icon\r\n            color=\"primary\"\r\n            ><v-icon>mdi-fullscreen</v-icon></v-btn\r\n          >\r\n          <v-menu open-on-hover top :offset-y=\"true\">\r\n            <template v-slot:activator=\"{ on, attr }\">\r\n              <v-btn\r\n                v-bind=\"attr\"\r\n                v-on=\"on\"\r\n                class=\"player-control__actions\"\r\n                icon\r\n                color=\"primary\"\r\n                @click=\"mutedVolume\"\r\n                ><v-icon>{{\r\n                  !isMuted ? \"mdi-volume-high\" : \"mdi-volume-variant-off\"\r\n                }}</v-icon></v-btn\r\n              >\r\n            </template>\r\n            <v-card class=\"pa-5\">\r\n              <h3 class=\"player-controls__volume__value\">\r\n                {{ !isMuted ? volume : \"0\" }}\r\n              </h3>\r\n              <v-slider\r\n                vertical\r\n                max=\"100\"\r\n                min=\"0\"\r\n                step=\"5\"\r\n                color=\"primary\"\r\n                @change=\"changeVolume()\"\r\n                v-model=\"volume\"\r\n              ></v-slider>\r\n            </v-card>\r\n          </v-menu>\r\n        </div>\r\n      </v-card>\r\n\r\n      <!-- -->\r\n      <v-card\r\n        color=\"rgb(0, 0, 0, 0.5)\"\r\n        tile\r\n        v-if=\"!isPlayed\"\r\n        class=\"player__details d-flex align-center px-1 px-md-5 py-3\"\r\n      >\r\n        <v-btn color=\"transparent\" elevation=\"0\" @click=\"goBack()\"\r\n          ><v-icon>mdi-arrow-left</v-icon></v-btn\r\n        >\r\n        <h3 :style=\"`color:` + this.$vuetify.theme.themes.light.primary\">\r\n          {{ playerDetails.title }}\r\n        </h3>\r\n        <v-spacer></v-spacer>\r\n        <v-btn @click=\"goHome()\" elevation=\"0\" color=\"primary\" outlined>POPCORN</v-btn>\r\n      </v-card>\r\n      <v-btn\r\n        v-if=\"!isPlayed\"\r\n        color=\"primary\"\r\n        x-large\r\n        fab\r\n        class=\"player__btn-play-lg\"\r\n      >\r\n        <v-icon @click=\"playToggle()\" x-large>mdi-play</v-icon>\r\n      </v-btn>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"ui-player\",\r\n  methods: {\r\n    playToggle() {\r\n      if (!this.start) this.start = true;\r\n      this.isPlayed = !this.isPlayed;\r\n      if (!this.isPlayed) this.$refs.video.pause();\r\n      else this.$refs.video.play();\r\n    },\r\n    changeVolume() {\r\n      this.isMuted = false;\r\n      this.$refs.video.volume = this.volume / 100;\r\n    },\r\n    mutedVolume() {\r\n      this.isMuted = !this.isMuted;\r\n      this.$refs.video.muted = !this.$refs.video.muted;\r\n    },\r\n    seekVideo() {\r\n      this.$refs.video.currentTime +=\r\n        this.vCurrentTime - this.$refs.video.currentTime;\r\n    },\r\n    requestFullscreen() {\r\n      this.$refs.video.requestFullscreen();\r\n    },\r\n    forward(time) {\r\n      if (this.$refs.video.currentTime > 10) {\r\n        this.$refs.video.currentTime += time;\r\n      } else this.$refs.video.currentTime = 0;\r\n    },\r\n    rewind(time) {\r\n      if (this.$refs.video.currentTime < this.$refs.video.duration - 10) {\r\n        this.$refs.video.currentTime -= time;\r\n      } else this.$refs.video.currentTime = 0;\r\n    },\r\n    updateTime() {\r\n      let min, sec;\r\n      min = Math.floor(this.$refs.video.currentTime / 60);\r\n      sec = Math.floor(this.$refs.video.currentTime - 60 * min);\r\n      if (min < 10) min = \"0\" + min;\r\n      if (sec < 10) sec = \"0\" + sec;\r\n      document.getElementById(\"currentTime\").innerHTML = min + \":\" + sec;\r\n      this.vCurrentTime = this.$refs.video.currentTime;\r\n    },\r\n    loadDetails() {\r\n      let min, sec;\r\n      min = Math.floor(this.$refs.video.duration / 60);\r\n      sec = Math.floor(this.$refs.video.duration - 60 * min);\r\n      if (min < 10) min = \"0\" + min;\r\n      if (sec < 10) sec = \"0\" + sec;\r\n      document.getElementById(\"videoDuration\").innerHTML = min + \":\" + sec;\r\n      this.vDuration = this.$refs.video.duration;\r\n      console.log(this.$refs.video.autoplay);\r\n      if (this.$refs.video.autoplay == true) {\r\n        this.isMuted = true;\r\n        this.isPlayed = false;\r\n      }\r\n    },\r\n    goBack() {\r\n      this.$router.back()\r\n    },\r\n    goHome() {\r\n      this.$router.push(\"/\");\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      isPlayed: false,\r\n      vDuration: 0,\r\n      volume: 70,\r\n      isMuted: false,\r\n      videoObj: null,\r\n      vCurrentTime: 0,\r\n      size: 0,\r\n      start: false,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.$refs.video.setAttribute(\"src\", this.playerDetails.src);\r\n    this.$refs.video.autoplay = this.playerDetails.autoplay;\r\n    this.$refs.video.controls = false;\r\n    if (window.outerWidth < this.playerDetails.size)\r\n      this.size = window.outerWidth - 10;\r\n    else this.size = this.playerDetails.size;\r\n  },\r\n  props: {\r\n    playerDetails: {\r\n      src: String,\r\n      size: Number,\r\n      autoplay: Boolean,\r\n      thumbnail: String,\r\n      title: String,\r\n      back: Object,\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scope>\r\n.player {\r\n  width: 100%;\r\n}\r\n.player__container {\r\n  position: relative !important;\r\n  text-align: center;\r\n  background: rgb(0, 0, 0);\r\n}\r\n.player-controls {\r\n  transform: scaleY(0);\r\n  position: absolute !important;\r\n  bottom: 5px;\r\n  left: 0;\r\n  width: 100% !important;\r\n}\r\n\r\n.player__details {\r\n  position: absolute !important;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100% !important;\r\n}\r\n\r\n.player__btn-play-lg {\r\n  position: absolute !important;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n.player:hover .player-controls {\r\n  transition: 0.5s all;\r\n  transform: scaleY(1);\r\n}\r\n.v-player {\r\n  position: relative;\r\n}\r\n.player__thumbnail {\r\n  position: absolute !important;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n#vuePlayer {\r\n  max-width: 100%;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}