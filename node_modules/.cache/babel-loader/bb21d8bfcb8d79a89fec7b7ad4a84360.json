{"ast":null,"code":"import _regeneratorRuntime from \"D:/HTML_CSS/popcorn-v3/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/HTML_CSS/popcorn-v3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.array.sort.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MovieApi from '../api/MovieApi';\nimport GenreApi from '../api/GenreApi';\nexport default {\n  name: 'ui-search',\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.beforeLoadDone = true;\n              _this.key = _this.$route.query.key;\n              _context.next = 4;\n              return MovieApi.search(_this.key);\n\n            case 4:\n              _this.searchList = _context.sent;\n              _context.next = 7;\n              return GenreApi.getAll();\n\n            case 7:\n              _this.genreFilter = _context.sent;\n              _this.beforeLoadDone = false;\n              _this.filterList = _this.searchList;\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    goWatch: function goWatch(movieId) {\n      this.$router.push(\"/watch/\".concat(movieId));\n    },\n    typeKey: function typeKey() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this2.beforeLoadDone = true;\n\n                _this2.$router.push({\n                  path: '/search',\n                  query: {\n                    key: _this2.key\n                  }\n                });\n\n                if (!(_this2.key.length > 0)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 5;\n                return MovieApi.search(_this2.key);\n\n              case 5:\n                _this2.searchList = _context2.sent;\n                _this2.filterList = _this2.filter(_this2.filterList);\n\n              case 7:\n                _this2.beforeLoadDone = false;\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    filter: function filter(list) {\n      var filter = {\n        genre: this.genreFilterVal,\n        type: this.typeFilerVal\n      };\n      list = this.searchList.filter(function (item) {\n        var genre = true,\n            type = true;\n\n        if (filter.genre != null) {\n          for (var _i = 0, _Object$entries = Object.entries(item._genre); _i < _Object$entries.length; _i++) {\n            var value = _Object$entries[_i];\n\n            if (value[\"1\"] == filter.genre._id) {\n              genre = true;\n              break;\n            }\n\n            genre = false;\n          }\n        }\n\n        if (filter.type != null) {\n          if (filter.type.toLowerCase() == item._type) {\n            type = true;\n          } else type = false;\n        }\n\n        if (genre && type) return true;else return false;\n      });\n      return list;\n    },\n    filterSearch: function filterSearch() {\n      this.beforeLoadDone = true;\n      this.filterList = this.filter(this.filterList);\n      this.beforeLoadDone = false;\n    },\n    sort: function sort() {\n      if (this.nameFilerVal == \"A-Z\") {\n        this.filterList.sort(function (a, b) {\n          if (a._name > b._name) return 1;else return -1;\n        });\n      } else {\n        this.filterList.sort(function (a, b) {\n          if (a._name < b._name) return 1;else return -1;\n        });\n      }\n    }\n  },\n  data: function data() {\n    return {\n      key: '',\n      beforeLoadDone: false,\n      genreFilter: [{}],\n      typeFilter: [\"Movie\", \"Series\"],\n      filterName: [\"A-Z\", \"Z-A\"],\n      genreFilterVal: null,\n      typeFilerVal: null,\n      nameFilerVal: '',\n      found: 0,\n      searchList: [{}],\n      filterList: [{}],\n      publicPath: process.env.BASE_URL\n    };\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;EACAA,iBADA;EAEAC,OAFA,qBAEA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;cACA;cACA;cAFA;cAAA,OAGAC,0BAHA;;YAAA;cAGA,gBAHA;cAAA;cAAA,OAIAC,iBAJA;;YAAA;cAIA,iBAJA;cAKA;cACA;;YANA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAOA,CATA;EAUAC;IACAC,OADA,mBACAC,OADA,EACA;MACA;IACA,CAHA;IAIAC,OAJA,qBAIA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;gBACA;;gBACA;kBAAAC;kBAAAC;oBAAAC;kBAAA;gBAAA;;gBAFA,MAGA,qBAHA;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAIAR,2BAJA;;cAAA;gBAIA,iBAJA;gBAKA;;cALA;gBAOA;;cAPA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAQA,CAZA;IAcAS,MAdA,kBAcAC,IAdA,EAcA;MACA;QACAC,0BADA;QAEAC;MAFA;MAIAF;QACA;QAAA;;QACA;UACA;YAAA;;YACA;cACAC;cACA;YACA;;YACAA;UACA;QACA;;QACA;UACA;YACAC;UACA,CAFA,MAGAA;QACA;;QACA,oCACA;MACA,CAnBA;MAqBA;IACA,CAzCA;IA0CAC,YA1CA,0BA0CA;MACA;MACA;MACA;IACA,CA9CA;IA+CAC,IA/CA,kBA+CA;MACA;QACA;UACA,qCACA;QACA,CAHA;MAIA,CALA,MAMA;QACA;UACA,qCACA;QACA,CAHA;MAIA;IACA;EA5DA,CAVA;EAyEAC,IAzEA,kBAyEA;IACA;MACAP,OADA;MAEAQ,qBAFA;MAGAC,iBAHA;MAIAC,aACA,OADA,EACA,QADA,CAJA;MAOAC,aACA,KADA,EACA,KADA,CAPA;MAUAC,oBAVA;MAWAC,kBAXA;MAYAC,gBAZA;MAaAC,QAbA;MAcAC,gBAdA;MAeAC,gBAfA;MAgBAC;IAhBA;EAkBA;AA5FA","names":["name","mounted","MovieApi","GenreApi","methods","goWatch","movieId","typeKey","path","query","key","filter","list","genre","type","filterSearch","sort","data","beforeLoadDone","genreFilter","typeFilter","filterName","genreFilterVal","typeFilerVal","nameFilerVal","found","searchList","filterList","publicPath"],"sourceRoot":"src/components","sources":["Search.vue"],"sourcesContent":["<template>\r\n    <v-card  tile flat dark min-height=\"100vh\">\r\n        <v-container>\r\n            <v-layout>\r\n                <v-text-field @keyup=\"typeKey()\" v-model=\"key\" append-icon=\"mdi-magnify\" color=\"primary\" outlined hide-details placeholder=\"Search\"></v-text-field>\r\n            </v-layout>\r\n            <v-layout class=\"my-3\">\r\n                <v-row>\r\n                    <v-col md=\"4\">\r\n                        <v-select @change=\"filterSearch()\" v-model=\"genreFilterVal\" clearable outlined color=\"primary\" :items=\"genreFilter\" item-text=\"_name\" item-value=\"_id\" return-object label=\"Genre\"></v-select>\r\n                    </v-col>\r\n                     <v-col md=\"4\">\r\n                        <v-select @change=\"filterSearch()\" v-model=\"typeFilerVal\" clearable outlined color=\"primary\" :items=\"typeFilter\" label=\"Type\"></v-select>\r\n                    </v-col>\r\n                     <v-col md=\"4\">\r\n                        <v-select @change=\"sort()\" v-model=\"nameFilerVal\" outlined color=\"primary\" :items=\"filterName\" label=\"Sort by name\"></v-select>\r\n                    </v-col>\r\n                </v-row>\r\n            </v-layout>\r\n            <v-layout class=\"mt-2\">\r\n                <h2 v-if=\"filterList.length > 0\">We found {{filterList.length}} items match your keyword!</h2>\r\n                <h2 v-else>No item found! Please check your keyword and filter</h2>\r\n            </v-layout>\r\n            <v-card v-if=\"beforeLoadDone\" tile flat class=\"text-center py-15\">\r\n                <v-progress-circular size=\"50\" color=\"primary\" indeterminate></v-progress-circular>\r\n                <h4>Searching...</h4>\r\n            </v-card>\r\n            <v-layout v-else class=\"flex-wrap\">\r\n                <v-card elevation=\"7\" height=\"225\" class=\"pa-2 ma-2\" v-for=\"(item, index) in filterList\" :key=\"index\">\r\n                    <v-layout>\r\n                        <v-img height=\"200\" width=\"200\" :src=\"publicPath + 'images/thumbnails/' + item._thumbnail\"></v-img>\r\n                        <v-card tile flat class=\"px-2\">\r\n                            <h3 class=\"my-2\">{{item._name | truncate(15)}}</h3>\r\n                            <p :style=\"`font-size: 15px; max-width: 125px`\">{{item._description | truncate(50)}}</p>\r\n                            <v-card-actions>\r\n                                <v-btn @click=\"goWatch(item._id)\" width=\"100%\" color=\"primary\">\r\n                                    <v-icon>mdi-play</v-icon>\r\n                                    Watch</v-btn>\r\n                            </v-card-actions>\r\n                        </v-card>\r\n                    </v-layout>\r\n                </v-card>\r\n            </v-layout>\r\n        </v-container>\r\n    </v-card>\r\n</template>\r\n\r\n<script>\r\nimport MovieApi from '../api/MovieApi'\r\nimport GenreApi from '../api/GenreApi'\r\nexport default {\r\n    name: 'ui-search',\r\n    async mounted(){\r\n        this.beforeLoadDone = true\r\n        this.key = this.$route.query.key\r\n        this.searchList= await MovieApi.search(this.key)\r\n        this.genreFilter = await GenreApi.getAll()\r\n        this.beforeLoadDone = false\r\n        this.filterList = this.searchList\r\n    },\r\n    methods:{\r\n        goWatch(movieId){\r\n            this.$router.push(`/watch/${movieId}`)\r\n        },\r\n        async typeKey(){\r\n            this.beforeLoadDone = true\r\n            this.$router.push({path: '/search', query: {key: this.key}} )\r\n            if(this.key.length > 0){\r\n                this.searchList= await MovieApi.search(this.key)\r\n                this.filterList = this.filter(this.filterList)\r\n            }\r\n            this.beforeLoadDone = false\r\n        },\r\n       \r\n        filter(list){\r\n            const filter = {\r\n                genre: this.genreFilterVal,\r\n                type: this.typeFilerVal,\r\n            }\r\n            list = this.searchList.filter(function(item){\r\n                let genre  = true, type = true\r\n                if(filter.genre != null){\r\n                    for(const value of Object.entries(item._genre)){\r\n                       if(value[\"1\"] == filter.genre._id){\r\n                        genre = true\r\n                        break\r\n                       }\r\n                       genre = false\r\n                    }\r\n                }\r\n                if(filter.type != null){\r\n                   if(filter.type.toLowerCase() == item._type){\r\n                    type = true\r\n                   }\r\n                   else type = false\r\n                }\r\n                if(genre && type) return true\r\n                else return false\r\n            })\r\n\r\n            return list\r\n        },\r\n        filterSearch(){\r\n            this.beforeLoadDone = true\r\n            this.filterList = this.filter(this.filterList)\r\n            this.beforeLoadDone = false\r\n        },\r\n        sort(){\r\n            if(this.nameFilerVal == \"A-Z\"){\r\n                this.filterList.sort((a,b)=> {\r\n                   if(a._name > b._name) return 1\r\n                   else return -1\r\n                })\r\n            }\r\n            else{\r\n                this.filterList.sort((a,b)=> {\r\n                   if(a._name < b._name) return 1\r\n                   else return -1\r\n                })\r\n            }\r\n        }\r\n        \r\n    },\r\n    data(){\r\n        return{\r\n            key: '',\r\n            beforeLoadDone: false,\r\n            genreFilter:[{}],\r\n            typeFilter: [\r\n                \"Movie\", \"Series\"\r\n            ],\r\n            filterName:[\r\n                \"A-Z\", \"Z-A\"\r\n            ],\r\n            genreFilterVal: null,\r\n            typeFilerVal: null,\r\n            nameFilerVal: '',\r\n            found: 0,\r\n            searchList:[{}],\r\n            filterList: [{}],\r\n            publicPath: process.env.BASE_URL\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}