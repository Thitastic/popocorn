{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"ui-player\",\n  methods: {\n    playToggle: function playToggle() {\n      this.isPlayed = !this.isPlayed;\n      if (this.isPlayed) this.$refs.video.pause();else this.$refs.video.play();\n    },\n    changeVolume: function changeVolume() {\n      this.isMuted = false;\n      this.$refs.video.volume = this.volume / 100;\n    },\n    mutedVolume: function mutedVolume() {\n      this.isMuted = !this.isMuted;\n      this.$refs.video.muted = !this.$refs.video.muted;\n    },\n    seekVideo: function seekVideo() {\n      this.$refs.video.pause();\n      this.$refs.video.currentTime += this.vCurrentTime - this.$refs.video.currentTime;\n      this.$refs.video.play();\n    },\n    requestFullscreen: function requestFullscreen() {\n      this.$refs.video.requestFullscreen();\n    },\n    forward: function forward(time) {\n      if (this.$refs.video.currentTime > 10) {\n        this.$refs.video.currentTime += time;\n      } else this.$refs.video.currentTime = 0;\n    },\n    rewind: function rewind(time) {\n      if (this.$refs.video.currentTime < this.$refs.video.duration - 10) {\n        this.$refs.video.currentTime -= time;\n      } else this.$refs.video.currentTime = 0;\n    },\n    updateTime: function updateTime() {\n      var min, sec;\n      min = Math.floor(this.$refs.video.currentTime / 60);\n      sec = Math.floor(this.$refs.video.currentTime - 60 * min);\n      if (min < 10) min = \"0\" + min;\n      if (sec < 10) sec = \"0\" + sec;\n      document.getElementById('currentTime').innerHTML = min + \":\" + sec;\n      this.vCurrentTime = Math.floor(this.$refs.video.currentTime);\n    },\n    loadDetails: function loadDetails() {\n      var min, sec;\n      min = Math.floor(this.$refs.video.duration / 60);\n      sec = Math.floor(this.$refs.video.duration - 60 * min);\n      if (min < 10) min = \"0\" + min;\n      if (sec < 10) sec = \"0\" + sec;\n      document.getElementById('videoDuration').innerHTML = min + \":\" + sec;\n      this.vDuration = this.$refs.video.duration;\n      console.log(this.$refs.video.autoplay);\n\n      if (this.$refs.video.autoplay == true) {\n        this.isMuted = true;\n        this.isPlayed = false;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      isPlayed: true,\n      vDuration: 0,\n      volume: 70,\n      isMuted: false,\n      videoObj: null,\n      vCurrentTime: 0,\n      size: 0\n    };\n  },\n  mounted: function mounted() {\n    this.$refs.video.setAttribute('src', this.playerDetails.src);\n    console.log(this.playerDetails.src);\n    this.$refs.video.controls = false;\n    if (window.outerWidth < this.playerDetails.size) this.size = window.outerWidth - 10;else this.size = this.playerDetails.size;\n  },\n  props: {\n    playerDetails: {\n      src: String,\n      size: Number\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;EACAA,iBADA;EAEAC;IACAC,UADA,wBACA;MACA;MACA,iDACA;IACA,CALA;IAMAC,YANA,0BAMA;MACA;MACA;IACA,CATA;IAUAC,WAVA,yBAUA;MACA;MACA;IACA,CAbA;IAcAC,SAdA,uBAcA;MACA;MACA;MACA;IACA,CAlBA;IAmBAC,iBAnBA,+BAmBA;MACA;IACA,CArBA;IAsBAC,OAtBA,mBAsBAC,IAtBA,EAsBA;MACA;QACA;MACA,CAFA,MAIA;IACA,CA5BA;IA6BAC,MA7BA,kBA6BAD,IA7BA,EA6BA;MACA;QACA;MACA,CAFA,MAIA;IACA,CAnCA;IAoCAE,UApCA,wBAoCA;MACA;MACAC;MACAC;MACA;MACA;MACAC;MACA;IACA,CA5CA;IA6CAC,WA7CA,yBA6CA;MACA;MACAH;MACAC;MACA;MACA;MACAC;MACA;MACAE;;MACA;QACA;QACA;MACA;IACA;EA1DA,CAFA;EA8DAC,IA9DA,kBA8DA;IACA;MACAC,cADA;MAEAC,YAFA;MAGAC,UAHA;MAIAC,cAJA;MAKAC,cALA;MAMAC,eANA;MAOAC;IAPA;EASA,CAxEA;EAyEAC,OAzEA,qBAyEA;IACA;IACAT;IACA;IACA,yFACA;EACA,CA/EA;EAgFAU;IACAC;MACAC,WADA;MAEAJ;IAFA;EADA;AAhFA","names":["name","methods","playToggle","changeVolume","mutedVolume","seekVideo","requestFullscreen","forward","time","rewind","updateTime","min","sec","document","loadDetails","console","data","isPlayed","vDuration","volume","isMuted","videoObj","vCurrentTime","size","mounted","props","playerDetails","src"],"sourceRoot":"src/components/player","sources":["Player.vue"],"sourcesContent":["<template>\r\n  <div class=\"player\">\r\n    <div class=\"player__container\">\r\n      <video autoplay muted ref=\"video\" :width=\"size\"  @click=\"playToggle()\" @timeupdate=\"updateTime\" @loadedmetadata=\"loadDetails\" id=\"vuePlayer\">\r\n        <source type=\"video/mp4\" />\r\n      </video>\r\n      <v-card :width=\"size\" color=\"transparent\" outlined class=\"player-controls d-flex\">\r\n        <div class=\"player-control align-self-center\">\r\n          <v-btn @click=\"playToggle()\" class=\"player-controls__actions\" icon color=\"primary\"\r\n            ><v-icon>{{!isPlayed ? 'mdi-pause' : 'mdi-play'}}</v-icon></v-btn\r\n          >\r\n          <v-btn @click=\"forward(10)\" class=\"player-controls__actions\" icon color=\"primary\"\r\n            ><v-icon>mdi-fast-forward-10</v-icon></v-btn\r\n          >\r\n          <v-btn @click=\"rewind(10)\" class=\"player-control__actions\" icon color=\"primary\"\r\n            ><v-icon>mdi-rewind-10</v-icon></v-btn\r\n          >\r\n        </div>\r\n        <v-layout class=\"player-control\">\r\n          <v-slider @change=\"seekVideo\" v-model=\"vCurrentTime\" id=\"playerSlider\" hide-details :max=\"vDuration\" min=\"0\" color=\"primary\"></v-slider>\r\n        </v-layout>\r\n        <div class=\"player-controls__timer align-self-center pa-2\">\r\n            <h6 :style=\"`color: #e31e2d`\">\r\n                <span id=\"currentTime\">0:00</span>\r\n                /\r\n                <span id=\"videoDuration\">0:00</span>\r\n            </h6>\r\n        </div>\r\n        <div class=\"player-control align-self-center\">\r\n          <v-btn @click=\"requestFullscreen\" class=\"player-controls__actions\" icon color=\"primary\"\r\n            ><v-icon>mdi-fullscreen</v-icon></v-btn\r\n          >\r\n          <v-menu open-on-hover top :offset-y=\"true\">\r\n            <template v-slot:activator=\"{ on, attr }\">\r\n              <v-btn\r\n                v-bind=\"attr\"\r\n                v-on=\"on\"\r\n                class=\"player-control__actions\"\r\n                icon\r\n                color=\"primary\"\r\n                @click=\"mutedVolume\"\r\n                ><v-icon>{{!isMuted ? 'mdi-volume-high' : 'mdi-volume-variant-off'}}</v-icon></v-btn\r\n              >\r\n            </template>\r\n            <v-card class=\"pa-5\">\r\n              <h3 class=\"player-controls__volume__value\">{{!isMuted ? volume : '0'}}</h3>\r\n              <v-slider\r\n                vertical\r\n                max=\"100\"\r\n                min=\"0\"\r\n                step=\"5\"\r\n                color=\"primary\"\r\n                @change=\"changeVolume()\"\r\n                v-model=\"volume\"\r\n              ></v-slider>\r\n            </v-card>\r\n          </v-menu>\r\n        </div>\r\n      </v-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"ui-player\",\r\n  methods: {\r\n      playToggle(){\r\n          this.isPlayed = !this.isPlayed\r\n          if(this.isPlayed) this.$refs.video.pause()\r\n          else this.$refs.video.play()\r\n      },\r\n      changeVolume(){\r\n          this.isMuted = false\r\n          this.$refs.video.volume =  this.volume/100\r\n      },\r\n      mutedVolume(){\r\n          this.isMuted = ! this.isMuted\r\n           this.$refs.video.muted = !this.$refs.video.muted \r\n      },\r\n      seekVideo(){\r\n        this.$refs.video.pause()\r\n        this.$refs.video.currentTime += (this.vCurrentTime - this.$refs.video.currentTime)\r\n        this.$refs.video.play()\r\n      },\r\n      requestFullscreen(){\r\n        this.$refs.video.requestFullscreen()\r\n      },\r\n      forward(time){\r\n        if(this.$refs.video.currentTime > 10){\r\n          this.$refs.video.currentTime += time\r\n        }\r\n        else\r\n          this.$refs.video.currentTime = 0\r\n      },\r\n      rewind(time){\r\n        if(this.$refs.video.currentTime  < this.$refs.video.duration - 10){\r\n          this.$refs.video.currentTime -= time\r\n        }\r\n        else\r\n          this.$refs.video.currentTime = 0\r\n      },\r\n      updateTime(){\r\n        let min, sec\r\n        min = Math.floor(this.$refs.video.currentTime/60)\r\n        sec = Math.floor(this.$refs.video.currentTime - 60*min)\r\n        if(min < 10) min = \"0\" + min\r\n        if(sec < 10) sec = \"0\" + sec\r\n        document.getElementById('currentTime').innerHTML = min + \":\" + sec\r\n        this.vCurrentTime = Math.floor(this.$refs.video.currentTime)\r\n      },\r\n      loadDetails(){\r\n        let min, sec\r\n        min = Math.floor(this.$refs.video.duration/60)\r\n        sec = Math.floor(this.$refs.video.duration - 60*min)\r\n        if(min < 10) min = \"0\" + min\r\n        if(sec < 10) sec = \"0\" + sec\r\n        document.getElementById('videoDuration').innerHTML = min + \":\" + sec\r\n        this.vDuration = this.$refs.video.duration\r\n        console.log(this.$refs.video.autoplay)\r\n        if(this.$refs.video.autoplay == true){\r\n          this.isMuted = true\r\n          this.isPlayed = false\r\n        }\r\n      }\r\n  },\r\n  data(){\r\n    return{\r\n      isPlayed: true,\r\n      vDuration: 0,\r\n      volume: 70,\r\n      isMuted: false,\r\n      videoObj: null,\r\n      vCurrentTime: 0,\r\n      size: 0,\r\n    }\r\n  },\r\n   mounted(){\r\n    this.$refs.video.setAttribute('src', this.playerDetails.src)\r\n    console.log(this.playerDetails.src)\r\n    this.$refs.video.controls =false\r\n    if(window.outerWidth < this.playerDetails.size) this.size = window.outerWidth-10\r\n    else this.size = this.playerDetails.size\r\n  },\r\n  props:{\r\n    playerDetails: {\r\n      src: String,\r\n      size: Number\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scope>\r\n.player{\r\n  width: 100%;\r\n}\r\n.player__container{\r\n  position: relative !important;\r\n}\r\n.player-controls{\r\n  transform: scaleY(0);\r\n  position: absolute !important;\r\n  bottom: 5px;\r\n  left: 0;\r\n}\r\n.player:hover .player-controls{\r\n  transition: .5s all;\r\n   transform: scaleY(1);\r\n}\r\n.v-player{\r\n  position: relative;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}